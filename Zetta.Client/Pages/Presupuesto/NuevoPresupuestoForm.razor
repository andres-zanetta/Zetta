@page "/presupuestos/nuevo"
@using Zetta.Shared.DTOS.PresItemDetalle
@using Zetta.Shared.DTOS.Presupuesto
@using Zetta.Shared.DTOS.ItemPresupuesto
@inject Zetta.Client.Servicios.IPresupuestoServices PresupuestoService
@inject Zetta.Client.Servicios.IClienteService ClienteService
@inject Zetta.Client.Servicios.ItemPresupuestoService ItemService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable

<div class="clientes-container">
    <header class="clientes-header text-center mb-4">
        <h1 class="fw-bold text-center text-naranja">Nuevo Presupuesto</h1>
        <p class="subtitle">Completá los datos para crear un nuevo presupuesto.</p>
    </header>

    <EditForm Model="@PresupuestoModel" OnValidSubmit="GuardarPresupuesto">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">
            <div class="col-md-6 mb-3">
                <label for="cliente" class="form-label">Cliente *</label>
                <InputSelect id="cliente" class="form-select" @bind-Value="PresupuestoModel.ClienteId">
                    <option value="">Seleccione un cliente</option>
                    @foreach (var cliente in Clientes)
                    {
                        <option value="@cliente.Id">@cliente.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => PresupuestoModel.ClienteId)" />
            </div>

            <div class="col-md-6 mb-3">
                <label for="rubro" class="form-label">Rubro *</label>
                <InputSelect id="rubro" class="form-select" @bind-Value="PresupuestoModel.Rubro">
                    <option value="">Seleccione un rubro</option>
                    @foreach (var rubro in Enum.GetValues<Rubro>())
                    {
                        <option value="@rubro">@rubro.ToString()</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => PresupuestoModel.Rubro)" />
            </div>

            <div class="col-md-6 mb-3">
                <label for="opcionPago" class="form-label">Opción de Pago *</label>
                <InputSelect id="opcionPago" class="form-select" @bind-Value="PresupuestoModel.OpcionDePago">
                    <option value="">Seleccione una opción</option>
                    @foreach (var pago in Enum.GetValues<OpcionDePago>())
                    {
                        <option value="@pago">@pago.ToString()</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => PresupuestoModel.OpcionDePago)" />
            </div>

            <div class="col-md-6 mb-3">
                <label for="manodeObra" class="form-label">Mano de Obra ($)</label>
                <InputNumber id="manodeObra" class="form-control"
                             @bind-Value="PresupuestoModel.ManodeObra"
                             min="0" step="0.01"
                             @oninput="async (e) => await RecalcularTotal(e)" />
            </div>

            <div class="col-md-6 mb-3">
                <label for="totalParcial" class="form-label">Total Parcial ($)</label>
                <InputNumber id="totalParcial" class="form-control" @bind-Value="PresupuestoModel.TotalP" readonly />
            </div>

            <div class="col-md-6 mb-3">
                <label for="totalFinal" class="form-label">Total Final ($)</label>
                <input id="totalFinal" class="form-control bg-light fw-bold text-end"
                       value="@PresupuestoModel.Total.ToString("N2")" readonly />
            </div>

            <div class="col-md-6 mb-3">
                <label for="tiempo" class="form-label">Tiempo Aprox. de Obra (días)</label>
                <InputText id="tiempo" class="form-control" @bind-Value="PresupuestoModel.TiempoAproxObra" />
            </div>

            <div class="col-md-6 mb-3">
                <label for="validez" class="form-label">Validez (días)</label>
                <InputText id="validez" class="form-control" @bind-Value="PresupuestoModel.ValidacionDias" />
            </div>

            <div class="col-12 mb-3">
                <label for="observacion" class="form-label">Observación</label>
                <InputTextArea id="observacion" class="form-control" rows="3" @bind-Value="PresupuestoModel.Observacion" />
            </div>

            <div class="col-12 mb-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <label class="form-label fw-bold">Items</label>
                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AbrirItemModalNuevo">➕ Nuevo Ítem</button>
                </div>

                <!-- Filtros -->
                <div class="row g-2 mb-2 p-2 border rounded bg-light">
                    <div class="col">
                        <input class="form-control form-control-sm" placeholder="Buscar por nombre..." @bind="searchNombre" />
                    </div>
                    <div class="col">
                        <input class="form-control form-control-sm" placeholder="Buscar por marca..." @bind="searchMarca" />
                    </div>
                    <div class="col">
                        <input class="form-control form-control-sm" placeholder="Buscar por fabricante..." @bind="searchFabricante" />
                    </div>
                    <div class="col-auto">
                        <button type="button" class="btn btn-sm btn-primary" @onclick="BuscarItems">Buscar</button>
                    </div>
                </div>

                @if (!CatalogoItemsFiltrados.Any())
                {
                    <div class="alert alert-info p-2">Ingrese filtros y presione "Buscar" para ver ítems.</div>
                }
                else
                {
                    <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                        <table class="table table-sm table-hover">
                            <thead class="table-light sticky-top">
                                <tr>
                                    <th></th>
                                    <th>Nombre</th>
                                    <th>Precio</th>
                                    <th>Cantidad</th>
                                    <th>Rubro</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var cat in CatalogoItemsFiltrados)
                                {
                                    var vm = SelectedItems.FirstOrDefault(s => s.ItemId == cat.Id);
                                    <tr class="@(vm != null ? "table-primary" : "")">
                                        <td>
                                            <input type="checkbox" class="form-check-input"
                                                   checked="@(vm != null)"
                                                   @onchange="(e) => OnToggleItem(cat, e)" />
                                        </td>
                                        <td>@cat.Nombre</td>
                                        <td>
                                            <input class="form-control form-control-sm text-end"
                                                   value="@(vm?.Precio.ToString("0.00") ?? cat.Precio.ToString("0.00"))"
                                                   @onchange="(e) => OnPrecioChanged(cat.Id, e)" />
                                        </td>
                                        <td>
                                            <input class="form-control form-control-sm text-end"
                                                   value="@(vm?.Cantidad.ToString() ?? "1")"
                                                   @onchange="(e) => OnCantidadChanged(cat.Id, e)" />
                                        </td>
                                        <td>@GetNombreRubro(cat.Rubro)</td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-secondary"
                                                    @onclick="() => AbrirItemModalEditar(cat.Id)">✏️</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Mensaje))
        {
            <div class="alert @MensajeCss mt-3 text-center">@Mensaje</div>
        }

        <div class="d-flex justify-content-end gap-2 mt-4">
            <button type="button" class="btn btn-secondary" @onclick="Volver">Cancelar</button>
            <button type="submit" class="btn btn-naranja" disabled="@Guardando">
                @(Guardando ? "Guardando..." : "Guardar Presupuesto")
            </button>
        </div>
    </EditForm>
</div>

@if (MostrarItemModal)
{
    <ItemPresupuestoFormModal ItemId="ItemIdParaEditar"
                              OnCerrar="CerrarItemModal"
                              OnGuardado="ItemGuardado" />
}

@code {
    // Inicializa asegurando el miembro required
    private POST_PresupuestoDTO PresupuestoModel { get; set; } = new POST_PresupuestoDTO { ClienteId = 0 };

    private List<GET_ClienteDTO> Clientes { get; set; } = new();
    private List<GET_ItemPresupuestoDTO> AllCatalogItems { get; set; } = new();
    private List<GET_ItemPresupuestoDTO> CatalogoItemsFiltrados { get; set; } = new();
    private List<SelectedItemVM> SelectedItems { get; set; } = new();

    private bool Guardando = false;
    private string? Mensaje;
    private string? MensajeCss;

    private string searchNombre { get; set; } = string.Empty;
    private string searchMarca { get; set; } = string.Empty;
    private string searchFabricante { get; set; } = string.Empty;

    private CancellationTokenSource? _recalcCts;

    private bool MostrarItemModal = false;
    private int? ItemIdParaEditar = null;

    private record SelectedItemVM
    {
        public int ItemId { get; init; }
        public string? Nombre { get; init; }
        public int Cantidad { get; set; } = 1;
        public decimal Precio { get; set; } = 0m;
    }

    protected override async Task OnInitializedAsync()
    {
        // Cargar clientes pero NO cargar el catálogo completo (se hará con GetAll() solo cuando el usuario lo pida o cuando se necesite)
        Clientes = (await ClienteService.GetAll())?.ToList() ?? new List<GET_ClienteDTO>();

        // *Opcional*: si quieres precargar AllCatalogItems para búsquedas locales,
        // descomenta la siguiente línea; por ahora la dejamos para carga a demanda:
        // AllCatalogItems = (await ItemService.GetAll())?.ToList() ?? new List<GET_ItemPresupuestoDTO>();

        Navigation.LocationChanged += OnLocationChanged;
    }

    // LocationChanged puede quedarse asíncrono pero devuelve void; está bien para el event handler del NavigationManager.
    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        try
        {
            var path = new Uri(e.Location).AbsolutePath?.TrimEnd('/').ToLowerInvariant() ?? string.Empty;
            if (path == "/presupuestos/nuevo")
            {
                // limpiar filtros/resultado al entrar a la página
                searchNombre = searchMarca = searchFabricante = string.Empty;
                CatalogoItemsFiltrados.Clear();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch
        {
            // no hacemos nada si falla
        }
    }

    // BÚSQUEDA: si tu ItemService no tiene BuscarAsync, usamos GetAll() y filtramos localmente.
    private async Task BuscarItems()
    {
        // si aún no tenemos el catálogo completo, lo traemos una sola vez
        if (AllCatalogItems == null || !AllCatalogItems.Any())
        {
            try
            {
                AllCatalogItems = (await ItemService.GetAll())?.ToList() ?? new List<GET_ItemPresupuestoDTO>();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error cargando catálogo: {ex.Message}");
                AllCatalogItems = new List<GET_ItemPresupuestoDTO>();
            }
        }

        // si no hay criterios, limpiamos
        if (string.IsNullOrWhiteSpace(searchNombre) &&
            string.IsNullOrWhiteSpace(searchMarca) &&
            string.IsNullOrWhiteSpace(searchFabricante))
        {
            CatalogoItemsFiltrados = new List<GET_ItemPresupuestoDTO>();
            await InvokeAsync(StateHasChanged);
            return;
        }

        var query = AllCatalogItems.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchNombre))
        {
            var s = searchNombre.Trim();
            query = query.Where(i => !string.IsNullOrEmpty(i.Nombre) && i.Nombre.Contains(s, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(searchMarca))
        {
            var s = searchMarca.Trim();
            query = query.Where(i => !string.IsNullOrEmpty(i.Marca) && i.Marca.Contains(s, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(searchFabricante))
        {
            var s = searchFabricante.Trim();
            query = query.Where(i => !string.IsNullOrEmpty(i.Fabricante) && i.Fabricante.Contains(s, StringComparison.OrdinalIgnoreCase));
        }

        CatalogoItemsFiltrados = query.ToList();
        await InvokeAsync(StateHasChanged);
    }

    // Abrir modal crear
    private void AbrirItemModalNuevo()
    {
        ItemIdParaEditar = null;
        MostrarItemModal = true;
    }

    // Abrir modal editar
    private void AbrirItemModalEditar(int id)
    {
        ItemIdParaEditar = id;
        MostrarItemModal = true;
    }

    private void CerrarItemModal()
    {
        ItemIdParaEditar = null;
        MostrarItemModal = false;
    }

    // Cuando el modal guardó: recargo catálogo y reaplico filtros
    private async Task ItemGuardado(int itemId)
    {
        // recargar catálogo (GetAll) para asegurarnos de tener el item nuevo/modificado
        AllCatalogItems = (await ItemService.GetAll())?.ToList() ?? new List<GET_ItemPresupuestoDTO>();
        await BuscarItems();
        CerrarItemModal();
    }

    // Manejo de checkbox (se hizo async para evitar problemas de tipo en lambdas)
    private async Task OnToggleItem(GET_ItemPresupuestoDTO cat, ChangeEventArgs e)
    {
        var existe = SelectedItems.FirstOrDefault(s => s.ItemId == cat.Id);
        if (existe == null)
        {
            SelectedItems.Add(new SelectedItemVM
            {
                ItemId = cat.Id,
                Nombre = cat.Nombre,
                Cantidad = 1,
                Precio = cat.Precio
            });
        }
        else
        {
            SelectedItems.Remove(existe);
        }

        await Task.Yield();
        RecalcularFromSelectedItems();
    }

    private async Task OnCantidadChanged(int itemId, ChangeEventArgs e)
    {
        if (!int.TryParse(e?.Value?.ToString(), out var cant) || cant < 1) cant = 1;
        var vm = SelectedItems.FirstOrDefault(s => s.ItemId == itemId);
        if (vm != null)
        {
            vm.Cantidad = cant;
            RecalcularFromSelectedItems();
        }
        await Task.Yield();
    }

    private async Task OnPrecioChanged(int itemId, ChangeEventArgs e)
    {
        if (!decimal.TryParse(e?.Value?.ToString(), out var precio) || precio < 0) precio = 0m;
        var vm = SelectedItems.FirstOrDefault(s => s.ItemId == itemId);
        if (vm != null)
        {
            vm.Precio = Math.Round(precio, 2);
            RecalcularFromSelectedItems();
        }
        await Task.Yield();
    }

    private void RecalcularFromSelectedItems()
    {
        PresupuestoModel.TotalP = SelectedItems.Sum(s => s.Precio * s.Cantidad);
        var mano = PresupuestoModel.ManodeObra ?? 0m;
        PresupuestoModel.Total = Math.Max(0m, mano + PresupuestoModel.TotalP);
        StateHasChanged();
    }

    // Recalcular mano de obra -> total
    private async Task RecalcularTotal(ChangeEventArgs e)
    {
        _recalcCts?.Cancel();
        _recalcCts?.Dispose();
        _recalcCts = new CancellationTokenSource();
        var token = _recalcCts.Token;

        try
        {
            await Task.Delay(250, token);
        }
        catch (TaskCanceledException) { return; }

        var mano = PresupuestoModel.ManodeObra ?? 0m;
        PresupuestoModel.Total = Math.Max(0m, mano + PresupuestoModel.TotalP);
        await InvokeAsync(StateHasChanged);
    }

    // Guardar presupuesto
    private async Task GuardarPresupuesto()
    {
        Guardando = true;
        Mensaje = null;

        try
        {
            if (PresupuestoModel.ClienteId == 0)
            {
                MostrarMensaje("Debe seleccionar un cliente.", "alert-warning");
                Guardando = false;
                return;
            }

            if (PresupuestoModel.Total <= 0)
            {
                MostrarMensaje("El total debe ser mayor a 0.", "alert-warning");
                Guardando = false;
                return;
            }

            PresupuestoModel.ItemsDetalle = SelectedItems
                .Select(s => new POST_PresItemDetalleDTO
                {
                    ItemPresupuestoId = s.ItemId,
                    Cantidad = s.Cantidad,
                    PrecioUnitario = s.Precio
                })
                .ToList();

            await PresupuestoService.Create(PresupuestoModel);
            MostrarMensaje("✅ Presupuesto creado con éxito.", "alert-success");

            await Task.Delay(800);
            Navigation.NavigateTo("/presupuestos", true);
        }
        catch (Exception ex)
        {
            MostrarMensaje($"Error al guardar presupuesto: {ex.Message}", "alert-danger");
        }

        Guardando = false;
    }

    private void MostrarMensaje(string texto, string tipo)
    {
        Mensaje = texto;
        MensajeCss = tipo;
        StateHasChanged();
    }

    private void Volver() => Navigation.NavigateTo("/presupuestos");

    // IDisposable
    public void Dispose()
    {
        try { Navigation.LocationChanged -= OnLocationChanged; } catch { }
        _recalcCts?.Cancel();
        _recalcCts?.Dispose();
        _recalcCts = null;
    }

    private string GetNombreRubro(Rubro rubro) => rubro switch
    {
        Rubro.Gas => "Gas",
        Rubro.Electricidad => "Electricidad",
        Rubro.Refrigeracion => "Refrigeración",
        Rubro.Solar => "Solar",
        Rubro.Plomeria => "Plomería",
        _ => rubro.ToString()
    };
}

