@page "/presupuestos"
@using Zetta.Shared.DTOS.Presupuesto
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop

@inject Zetta.Client.Servicios.IPresupuestoServices PresupuestoService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="clientes-container">
    <header class="clientes-header text-center mb-4">
        <h1>Gestión de Presupuestos</h1>
        <p class="subtitle">Administrá, controlá y generá presupuestos detallados.</p>
    </header>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <button class="btn btn-secondary" @onclick="VolverAlInicio">← Volver al Menú</button>
        <button class="btn btn-naranja" @onclick="AbrirFormularioNuevo">➕ Nuevo Presupuesto</button>
    </div>

    @if (Cargando)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-warning" role="status"></div>
            <p class="mt-3">Cargando presupuestos...</p>
        </div>
    }
    else
    {
        <table class="table table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Cliente</th>
                    <th>Rubro</th>
                    <th>Opción de Pago</th>
                    <th>Mano de Obra</th>
                    <th>Total Items</th>
                    <th>Items SI/NO</th>
                    <th>Total Final</th>
                    <th>Estado</th>
                    <th>Tiempo Obra</th>
                    <th>Validez (días)</th>
                    <th>Observación</th>
                    <th class="text-center">Acciones</th>
                </tr>
            </thead>

            <tbody>
                @if (Presupuestos == null || Presupuestos.Count == 0)
                {
                    <tr>
                        <td colspan="13" class="text-center text-muted">No hay presupuestos registrados.</td>
                    </tr>
                }
                else
                {
                    @foreach (var p in Presupuestos)
                    {
                        <tr>
                            <td>@p.Id</td>
                            <td>@p.NombreCliente</td>
                            <td>@p.RubroNombre</td> @* Mostrar nombre del rubro *@
                            <td>@p.OpcionDePago</td>
                            <td>$ @p.ManodeObra?.ToString("N2")</td>
                            <td>$ @p.TotalP.ToString("N2")</td>
                            <td>@(p.Materiales ? "Sí" : "No")</td>
                            <td class="fw-bold">$ @p.Total.ToString("N2")</td>
                            <td>
                                @if (p.Aceptado)
                                {
                                    <span class="badge bg-success">Aceptado</span>
                                }
                                else
                                {

                                    <span class="badge bg-secondary">Pendiente</span>
                                }
                            </td>
                            <td>@p.TiempoAproxObra</td>
                            <td>@p.ValidacionDias</td>
                            <td>@(string.IsNullOrWhiteSpace(p.Observacion) ? "-" : p.Observacion)</td>

                            <td class="text-center">
                                <button class="btn btn-sm btn-outline-primary me-1"
                                        title="Editar presupuesto"
                                        @onclick="() => AbrirFormularioEdicion(p.Id)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-info me-1"
                                        title="Descargar PDF"
                                        @onclick="() => GenerarPdfCliente(p)">
                                    <i class="bi bi-download"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger"
                                        title="Eliminar presupuesto"
                                        @onclick="() => EliminarPresupuesto(p.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<GET_PresupuestoDTO> Presupuestos { get; set; } = new();
    private bool Cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await CargarPresupuestos();
    }

    private async Task CargarPresupuestos()
    {
        try
        {
            Cargando = true;
            // Asumiendo que GetAll ahora trae todos los datos necesarios mapeados
            Presupuestos = await PresupuestoService.GetAll() ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar presupuestos: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "❌ Error al cargar presupuestos.");
        }
        finally
        {
            Cargando = false;
        }
    }

    private void AbrirFormularioNuevo() => Navigation.NavigateTo("/presupuestos/nuevo");
    private void AbrirFormularioEdicion(int id) => Navigation.NavigateTo($"/presupuestos/editar/{id}");

    private async Task EliminarPresupuesto(int id)
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar este presupuesto?");
        if (!confirmar) return;

        try
        {
            await PresupuestoService.Delete(id);
            Presupuestos.RemoveAll(p => p.Id == id);
            await JSRuntime.InvokeVoidAsync("alert", "✅ Presupuesto eliminado correctamente.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar presupuesto: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "❌ Error al eliminar el presupuesto.");
        }
    }

    // --- MÉTODO GENERAR PDF ACTUALIZADO ---
    private async Task GenerarPdfCliente(GET_PresupuestoDTO presupuesto)
    {
        if (presupuesto == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "❌ No se puede generar PDF: faltan datos del presupuesto.");
            return;
        }

        // --- VERIFICACIÓN ADICIONAL ---
        // Si GetAll() no trae los ItemsDetalle, necesitamos traerlos con GetById
        if (presupuesto.ItemsDetalle == null || !presupuesto.ItemsDetalle.Any())
        {
            Console.WriteLine($"Presupuesto {presupuesto.Id} no tiene detalles en la lista inicial. Cargando detalles...");
            try
            {
                var presupuestoConDetalles = await PresupuestoService.GetById(presupuesto.Id);
                if (presupuestoConDetalles?.ItemsDetalle != null)
                {
                    presupuesto.ItemsDetalle = presupuestoConDetalles.ItemsDetalle; // Reemplazar con la lista detallada
                }
                else
                {
                    presupuesto.ItemsDetalle = new List<GET_PresItemDetalleDTO>(); // Usar lista vacía si GetById tampoco los trae
                    Console.WriteLine($"Advertencia: GetById para {presupuesto.Id} tampoco devolvió ItemsDetalle.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al cargar detalles para PDF del presupuesto {presupuesto.Id}: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", $"❌ Error al cargar los detalles del presupuesto para el PDF.");
                return; // No continuar si no se pueden cargar los detalles
            }
        }

        // --- VERIFICACIÓN DATOS DEL CLIENTE ---
        // Si faltan datos del cliente en el DTO de la lista, podríamos cargarlos o mostrar N/A
        if (string.IsNullOrEmpty(presupuesto.DireccionCliente) ||
            string.IsNullOrEmpty(presupuesto.TelefonoCliente) ||
            string.IsNullOrEmpty(presupuesto.EmailCliente) ||
            string.IsNullOrEmpty(presupuesto.LocalidadCliente))
        {
            Console.WriteLine($"Advertencia: Faltan datos del cliente para el PDF del presupuesto {presupuesto.Id}.");
            // Aquí podrías decidir si hacer una llamada extra para obtener los datos completos del cliente
            // o simplemente permitir que el PDF muestre 'N/A'. Por simplicidad, dejaremos que muestre 'N/A'.
        }


        try
        {
            // Pasamos el DTO (potencialmente actualizado con detalles) a JavaScript
            await JSRuntime.InvokeVoidAsync("generarPresupuestoPdf", presupuesto);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al invocar JS para PDF: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"❌ Error al generar el PDF: {ex.Message}");
        }
    }

    private void VolverAlInicio() => Navigation.NavigateTo("/");
}