@page "/presupuestos"
@using Zetta.Shared.DTOS.Presupuesto
@inject Zetta.Client.Servicios.IPresupuestoServices PresupuestoService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="clientes-container">
    <header class="clientes-header text-center mb-4">
        <h1>Gestión de Presupuestos</h1>
        <p class="subtitle">Administrá, controlá y generá presupuestos detallados.</p>
    </header>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <button class="btn btn-secondary" @onclick="VolverAlInicio">← Volver al Menú</button>
        <button class="btn btn-naranja" @onclick="AbrirFormularioNuevo">➕ Nuevo Presupuesto</button>
    </div>

    @if (Cargando)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-warning" role="status"></div>
            <p class="mt-3">Cargando presupuestos...</p>
        </div>
    }
    else
    {
        <table class="table table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Cliente</th>
                    <th>Rubro</th>
                    <th>Opción de Pago</th>
                    <th>Mano de Obra</th>
                    <th>Total Parcial</th>
                    <th>Total Final</th>
                    <th>Estado</th>
                    <th>Tiempo Obra</th>
                    <th>Validez (días)</th>
                    <th>Observación</th>
                    <th class="text-center">Acciones</th>
                </tr>
            </thead>

            <tbody>
                @if (Presupuestos == null || Presupuestos.Count == 0)
                {
                    <tr>
                        <td colspan="12" class="text-center text-muted">No hay presupuestos registrados.</td>
                    </tr>
                }
                else
                {
                    @foreach (var p in Presupuestos)
                    {
                        <tr>
                            <td>@p.Id</td>
                            @* <td>@p.NombreCliente</td> *@
                            <td>@p.Rubro</td>
                            <td>@p.OpcionDePago</td>
                            <td>$ @p.ManodeObra?.ToString("N2")</td>
                            <td>$ @p.TotalP.ToString("N2")</td>
                            <td class="fw-bold">$ @p.Total.ToString("N2")</td>
                            <td>
                                @if (p.Aceptado)
                                {
                                    <span class="badge bg-success">Aceptado</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Pendiente</span>
                                }
                            </td>
                            <td>@p.TiempoAproxObra</td>
                            <td>@p.ValidacionDias</td>
                            <td>@(string.IsNullOrWhiteSpace(p.Observacion) ? "-" : p.Observacion)</td>
                            
                            <td class="text-center">
                                <button class="btn btn-sm btn-outline-primary me-2"
                                        title="Editar presupuesto"
                                        @onclick="() => AbrirFormularioEdicion(p.Id)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger"
                                        title="Eliminar presupuesto"
                                        @onclick="() => EliminarPresupuesto(p.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<GET_PresupuestoDTO> Presupuestos { get; set; } = new();
    private bool Cargando = true;

    // Carga inicial
    protected override async Task OnInitializedAsync()
    {
        await CargarPresupuestos();
    }

    private async Task CargarPresupuestos()
    {
        try
        {
            Cargando = true;
            Presupuestos = await PresupuestoService.GetAll() ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar presupuestos: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "❌ Error al cargar presupuestos.");
        }
        finally
        {
            Cargando = false;
        }
    }

    private void AbrirFormularioNuevo()
    {
        Navigation.NavigateTo("/presupuestos/nuevo");
    }

    private void AbrirFormularioEdicion(int id)
    {
        Navigation.NavigateTo($"/presupuestos/editar/{id}");
    }

    private async Task EliminarPresupuesto(int id)
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar este presupuesto?");
        if (!confirmar) return;

        try
        {
            await PresupuestoService.Delete(id);
            Presupuestos.RemoveAll(p => p.Id == id);
            await JSRuntime.InvokeVoidAsync("alert", "✅ Presupuesto eliminado correctamente.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar presupuesto: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "❌ Error al eliminar el presupuesto.");
        }
    }

    private void VolverAlInicio() => Navigation.NavigateTo("/");
}
