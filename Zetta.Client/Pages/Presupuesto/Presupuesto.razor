@page "/presupuestos"
@using Zetta.Shared.DTOS.Presupuesto
@inject Zetta.Client.Servicios.IPresupuestoServices PresupuestoService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="clientes-container">
    <header class="clientes-header text-center mb-4">
        <h1>Gestión de Presupuestos</h1>
        <p class="subtitle">Administrá, controlá y generá presupuestos detallados.</p>
    </header>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <button class="btn btn-secondary" @onclick="VolverAlInicio">← Volver al Menú</button>
        <button class="btn btn-naranja" @onclick="AbrirFormularioNuevo">➕ Nuevo Presupuesto</button>
        
    </div>

    <table class="table table-hover align-middle">
        <thead>
            <tr>
                <th>ID</th>
                <th>Rubro</th>
                <th>Opción de Pago</th>
                <th>Mano de Obra</th>
                <th>Total Parcial</th>
                <th>Total Final</th>
                <th>Aceptado</th>
                <th>Tiempo Aprox. Obra</th>
                <th>Validez (días)</th>
                <th>Observación</th>
                <th>Acciones</th>
            </tr>
        </thead>

        <tbody>
            @if (Presupuestos == null || Presupuestos.Count == 0)
            {
                <tr>
                    <td colspan="11" class="text-center text-muted">No hay presupuestos registrados.</td>
                </tr>
            }
            else
            {
                @foreach (var p in Presupuestos)
                {
                    <tr>
                        <td>@p.Id</td>
                        <td>@p.Rubro</td>
                        <td>@p.OpcionDePago</td>
                        <td>$ @p.ManodeObra?.ToString("N2")</td>
                        <td>$ @p.TotalP.ToString("N2")</td>
                        <td>$ @p.Total.ToString("N2")</td>
                        <td>
                            @if (p.Aceptado)
                            {
                                <span class="badge bg-success">Aceptado</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Pendiente</span>
                            }
                        </td>
                        <td>@p.TiempoAproxObra días</td>
                        <td>@p.ValidacionDias</td>
                        <td>@(string.IsNullOrWhiteSpace(p.Observacion) ? "-" : p.Observacion)</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary me-2"
                                    @onclick="() => AbrirFormularioEdicion(p)">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => EliminarPresupuesto(p.Id)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<GET_PresupuestoDTO> Presupuestos { get; set; } = new();

    private PresupuestoFormModel PresupuestoActual = new PresupuestoFormModel();
    private bool MostrarModal = false;
    private bool Cargando = true;

    public class PresupuestoFormModel
    {
        public Rubro Rubro { get; set; } 
        public bool Aceptado { get; set; } = false;  

        public string? Observacion { get; set; } // Notas o comentarios adicionales.


        public decimal Total { get; set; } // Monto total final del presupuesto.


        public decimal? ManodeObra { get; set; } // Costo estimado de mano de obra.


        public decimal TotalP { get; set; } // Campo adicional para otro cálculo de total si es necesario.

        public string TiempoAproxObra { get; set; } // Tiempo estimado para la ejecución de la obra.

        public string ValidacionDias { get; set; } // Días de validez del presupuesto.

        public OpcionDePago OpcionDePago { get; set; } // Opción de pago seleccionada.


    }




    protected override async Task OnInitializedAsync()
    {
        try
        {
            Presupuestos = await PresupuestoService.GetAll() ?? new List<GET_PresupuestoDTO>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar presupuestos: {ex.Message}");
        }
        Cargando = false;
    }

    private void AbrirFormularioNuevo() => Navigation.NavigateTo("/presupuestos/nuevo");

    private void AbrirFormularioEdicion(GET_PresupuestoDTO presupuesto)
    {
        PresupuestoActual = new PresupuestoFormModel
        {
            Rubro = presupuesto.Rubro,
            Aceptado = presupuesto.Aceptado,
            Observacion=presupuesto.Observacion,

                

        };
    }

    private async Task EliminarPresupuesto(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que querés eliminar este presupuesto?"))
        {
            try
            {
                await PresupuestoService.Delete(id);
                Presupuestos.RemoveAll(p => p.Id == id);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error eliminando presupuesto: {ex.Message}");
            }
        }
    }

    private void VolverAlInicio()
    {
        Navigation.NavigateTo("/");
    }
}
