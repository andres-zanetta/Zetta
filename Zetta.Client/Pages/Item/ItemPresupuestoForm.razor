@page "/itempresupuesto-form/{Id:int?}"
@inject NavigationManager Navigation
@inject IItemPresupuestoService ItemPresupuestoService

<h3>@(EsEdicion ? "Editar ítem de presupuesto" : "Nuevo ítem de presupuesto")</h3>

@if (Cargando)
{
    <p>Cargando datos...</p>
}
else if (Error != null)
{
    <div class="alert alert-danger">@Error</div>
}
else
{
    <EditForm Model="@item" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nombre</label>
            <InputText @bind-Value="item.Nombre" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Precio</label>
            <InputNumber @bind-Value="item.Precio" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Rubro</label>
            <InputSelect @bind-Value="item.Rubro" class="form-select">
                <option value="">Seleccione un rubro</option>
                @foreach (var rubro in Enum.GetValues<Rubro>())
                {
                    <option value="@rubro">@GetNombreRubro(rubro)</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Medida</label>
            <InputText @bind-Value="item.Medida" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Material</label>
            <InputText @bind-Value="item.Material" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Descripción</label>
            <InputTextArea @bind-Value="item.Descripcion" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Fabricante</label>
            <InputText @bind-Value="item.Fabricante" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Marca</label>
            <InputText @bind-Value="item.Marca" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Fecha actualización precio</label>
            <InputDate @bind-Value="item.FechActuPrecio" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary me-2">
            @(EsEdicion ? "Guardar cambios" : "Crear ítem")
        </button>

        <button type="button" class="btn btn-secondary" @onclick="Volver">Cancelar</button>
    </EditForm>
}

@code {
    [Parameter] public int? Id { get; set; }
    private POST_ItemPresupuestoDTO item = new();
    private bool EsEdicion => Id.HasValue;
    private bool Cargando = true;
    private string? Error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (ItemModel.Precio <= 0)
            {
                Console.WriteLine("El precio debe ser mayor que cero.");
                return;
            }
            if (EsEdicion)
            {
                var existente = await ItemPresupuestoService.GetById(Id.Value);
                if (existente != null)
                {
                    item = new POST_ItemPresupuestoDTO
                    {
                        Nombre = existente.Nombre,
                        Precio = existente.Precio,
                        Rubro = existente.Rubro,
                        Medida = existente.Medida,
                        Material = existente.Material,
                        Descripcion = existente.Descripcion,
                        Fabricante = existente.Fabricante,
                        Marca = existente.Marca,
                        FechActuPrecio = existente.FechActuPrecio
                    };
                }
                else
                {
                    Error = "No se encontró el ítem a editar.";
                }
            }
        }
        catch (Exception ex)
        {
            Error = $"Error al cargar datos: {ex.Message}";
        }
        finally
        {
            Cargando = false;
        }
    }

    private async Task Guardar()
    {
        try
        {
            if (EsEdicion)
            {
                var dto = new PUT_ItemPresupuestoDTO
                {
                    Nombre = item.Nombre,
                    Precio = item.Precio,
                    Rubro = item.Rubro,
                    Medida = item.Medida,
                    Material = item.Material,
                    Descripcion = item.Descripcion,
                    Fabricante = item.Fabricante,
                    Marca = item.Marca,
                    FechActuPrecio = item.FechActuPrecio
                };
                await ItemPresupuestoService.Update(Id!.Value, dto);
            }
            else
            {
                await ItemPresupuestoService.Create(item);
            }

            Navigation.NavigateTo("/itempresupuesto");
        }
        catch (Exception ex)
        {
            Error = $"Error al guardar: {ex.Message}";
        }
    }

    private void Volver()
    {
        Navigation.NavigateTo("/itempresupuesto");
    }

    private string GetNombreRubro(Rubro rubro) => rubro switch
    {

        Rubro.Gas => "Gas",
        Rubro.Electricidad => "Electricidad",
        Rubro.Refrigeracion => "Refrigeración",
        Rubro.Solar => "Termotanques Solares",
        Rubro.Plomeria => "Plomería",
        _ => rubro.ToString()
    };
}
