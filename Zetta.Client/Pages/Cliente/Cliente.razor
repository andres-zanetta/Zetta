@page "/clientes"
@inject Zetta.Client.Servicios.IClienteService ClienteService 
@inject NavigationManager Navigation
@inject Microsoft.JSInterop.IJSRuntime JSRuntime 

<div class="clientes-container">
    <header class="clientes-header text-center">
        <h1>Gestión de Clientes</h1>
        <p class="subtitle">Administrá la información de tus clientes</p>
    </header>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <button class="btn btn-outline-dark" @onclick="VolverAlInicio">← Volver al Menú</button>
        <button class="btn btn-naranja" @onclick="AbrirModalNuevo">➕ Nuevo Cliente</button>
    </div>

    @if (Cargando)
    {
        <p>Cargando clientes...</p>
    }
    else
    {
        <div class="table-responsive shadow-sm">
            <table class="table table-hover align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Nombre</th>
                        <th>Apellido</th>
                        <th>Teléfono</th>
                        <th>Email</th>
                        <th>Localidad</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cliente in Clientes)
                    {
                        <tr>
                            <td>@cliente.Nombre</td>
                            <td>@cliente.Apellido</td>
                            <td>@cliente.Telefono</td>
                            <td>@cliente.Email</td>
                            <td>@cliente.Localidad</td>
                            <td>
                                <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => AbrirModalEditar(cliente)">✏️ Editar</button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => EliminarCliente(cliente.Id)">❌ Eliminar</button> 
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }


    @* Modal de Creación/Edición *@
    @if (MostrarModal)
    {
        <div class="modal d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <EditForm Model="@ClienteActual" OnValidSubmit="@GuardarCliente">
                        @* Usamos ClienteActual como Model *@
                        <DataAnnotationsValidator />
                        <div class="modal-header">
                            <h5 class="modal-title">@(Editando ? "Editar Cliente" : "Nuevo Cliente")</h5>
                            <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                        </div>
                        <div class="modal-body">
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Nombre</label>
                                <InputText @bind-Value="ClienteActual.Nombre" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Apellido</label>
                                <InputText @bind-Value="ClienteActual.Apellido" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Teléfono</label>
                                <InputText @bind-Value="ClienteActual.Telefono" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <InputText @bind-Value="ClienteActual.Email" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Localidad</label>
                                <InputText @bind-Value="ClienteActual.Localidad" class="form-control" />
                            </div>
                            @* Agregamos Direccion, ya que está en los DTOs *@
                            <div class="mb-3">
                                <label class="form-label">Dirección</label>
                                <InputText @bind-Value="ClienteActual.Direccion" class="form-control" />
                            </div>

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                            <button type="submit" class="btn btn-naranja">Guardar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>


@code {
    // La lista ahora usa el DTO de lectura
    private List<GET_ClienteDTO> Clientes = new List<GET_ClienteDTO>();

    // modelo intermedio para el formulario, incluyendo el Id para edición.
    private ClienteFormModel ClienteActual = new ClienteFormModel();
    private bool MostrarModal = false;
    private bool Editando = false;
    private bool Cargando = true;

    // Modelo intermedio para el formulario de cliente
    public class ClienteFormModel
    {
        public int Id { get; set; } // Id es necesario solo para identificar en edición
        public string Nombre { get; set; } = "";
        public string Apellido { get; set; } = "";
        public string Telefono { get; set; } = "";
        public string? Email { get; set; }
        public string? Localidad { get; set; }
        public string? Direccion { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
    }

    private async Task CargarClientes()
    {
        Cargando = true;
        try
        {
            // Llama al servicio para obtener los datos de la API
            Clientes = await ClienteService.GetAll() ?? new List<GET_ClienteDTO>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar clientes: {ex.Message}");
            Clientes = new List<GET_ClienteDTO>();
        }
        Cargando = false;
    }

    private void AbrirModalNuevo()
    {
        // Inicializa un nuevo modelo
        ClienteActual = new ClienteFormModel();
        Editando = false;
        MostrarModal = true;
    }

    private void AbrirModalEditar(GET_ClienteDTO cliente)
    {
        // Mapea el DTO de la tabla al modelo del formulario
        ClienteActual = new ClienteFormModel
        {
            Id = cliente.Id,
            Nombre = cliente.Nombre,
            Apellido = cliente.Apellido,
            Telefono = cliente.Telefono,
            Email = cliente.Email,
            Localidad = cliente.Localidad,
            Direccion = cliente.Direccion
        };
        Editando = true;
        MostrarModal = true;
    }

    private async Task GuardarCliente()
    {
        try
        {
            if (Editando)
            {
                // Mapea el modelo del formulario al DTO de edición
                var putDto = new PUT_ClienteDTO
                {
                    Id = ClienteActual.Id, // El ID es obligatorio en PUT_ClienteDTO
                    Nombre = ClienteActual.Nombre,
                    Apellido = ClienteActual.Apellido,
                    Telefono = ClienteActual.Telefono,
                    Email = ClienteActual.Email,
                    Localidad = ClienteActual.Localidad,
                    Direccion = ClienteActual.Direccion
                };
                await ClienteService.Update(ClienteActual.Id, putDto);
            }
            else
            {
                // Mapea el modelo del formulario al DTO de creación
                var postDto = new POST_ClienteDTO
                {
                    Nombre = ClienteActual.Nombre,
                    Apellido = ClienteActual.Apellido,
                    Telefono = ClienteActual.Telefono,
                    Email = ClienteActual.Email,
                    Localidad = ClienteActual.Localidad,
                    Direccion = ClienteActual.Direccion
                };
                await ClienteService.Create(postDto);
            }

            CerrarModal();
            await CargarClientes(); // Recarga la lista para mostrar el cambio
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar cliente: {ex.Message}");
        }
    }

    private async Task EliminarCliente(int id)
    {
        // Pide confirmación antes de eliminar
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que quieres eliminar este cliente?"))
        {
            try
            {
                await ClienteService.Delete(id);
                // Si la eliminación fue exitosa, eliminamos de la lista local
                Clientes.RemoveAll(c => c.Id == id);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar cliente {id}: {ex.Message}");
            }
        }
    }

    private void CerrarModal() => MostrarModal = false;

    private void VolverAlInicio()
    {
        Navigation.NavigateTo("/");
    }
}